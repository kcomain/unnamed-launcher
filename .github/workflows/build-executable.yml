# This workflow will install Python dependencies, build the code with a single version of Python on two different platforms

name: Build executables

on: [ push ]

jobs:
  build:
    strategy:
      matrix:
        os: [ windows-latest, ubuntu-latest ]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Check out
        uses: actions/checkout@v2

      - name: Install Qt (beta)
        uses: jurplel/install-qt-action@v2.13.2

      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip

      - name: Setup poetry
        uses: abatilo/actions-poetry@v2.0.0

      - name: Install dependencies
        run: |
          poetry install

      - name: Build (linux)
        if: ${{ runner.os == 'Linux' }}
        run: |
          poetry run make all build-executable
          echo "ARTIFACT_PATH=unnamed-launcher" >> $GITHUB_ENV

      - name: Build (windows)
        if: ${{ runner.os == 'Windows' }}
        shell: cmd
        run: |
          echo ARTIFACT_PATH=unnamed-launcher.exe >> %GITHUB_ENV%
          ./bin/build-windows.bat

      - name: Upload built binaries
        uses: actions/upload-artifact@v2.2.4
        with:
          name: ${{ env.ARTIFACT_PATH }}
          path: build/dist/*
          retention-days: 1

  #     - name: Lint with flake8
  #       run: |
  #         # stop the build if there are Python syntax errors or undefined names
  #         flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
  #         # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
  #         flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  release:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Download artifacts
        id: download
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: List artifact directory
        run: |
          ls artifacts

      - name: Set tag name
        run: |
          export PACKAGE_VERSION="v$(python -c 'from unnamed import VERSION;print(VERSION)')"
          export REVISION=$(git rev-parse --short HEAD)
          echo RELEASE_TAG=${PACKAGE_VERSION}+${REVISION} >> $GITHUB_ENV
          echo RELEASE_NAME="${PACKAGE_VERSION} build ${REVISION}" >> $GITHUB_ENV

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/unnamed-launcher/unnamed-launcher
            artifacts/unnamed-launcher.exe/unnamed-launcher.exe
          name: ${{ env.RELEASE_NAME }}
          tag_name: ${{ env.RELEASE_TAG }}
          prerelease: true
          body_path: .github/release.md
